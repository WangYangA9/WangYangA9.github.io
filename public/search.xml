<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fabric证书与账户体系</title>
      <link href="/2020/08/24/fabric-ca/"/>
      <url>/2020/08/24/fabric-ca/</url>
      
        <content type="html"><![CDATA[<h1 id="成员提供者服务MSP-Membership-service-provider"><a href="#成员提供者服务MSP-Membership-service-provider" class="headerlink" title="成员提供者服务MSP(Membership service provider)"></a>成员提供者服务MSP(Membership service provider)</h1><ul><li>Fabric的MSP是一个提供抽象化成员操作框架的组件</li><li>MSP将颁发与校验证书，以及用户认证的密码学机制与协议都抽象了出来</li><li>一个MSP可以自定义身份、身份管理(身份验证)与认证(生成与校验签名)的规则</li><li>一个Fabric区块链网络可以被一个或多个MSP管理。这提供了模块化的成员操作和兼容不同成员标准与框架的互操作性<h2 id="MSP配置"><a href="#MSP配置" class="headerlink" title="MSP配置"></a>MSP配置</h2></li><li>初始化MSP实例之前，每一个Peer节点和orderer及诶单都要在本地指定其配置，并在channel上启用peer、orderer及client的身份验证和各自签名验证</li><li>为了方便MSP的引用，每个MSP都需要一个特定的名字(例如msp1，org2，org3.divA)。在一个channel中，MSP成员管理规则表示一个团体，组织或组织分工时，该名称会被引用。MSP标识必须唯一，orderer节点在检测到两个MSP标识符相同是会启动失败。</li><li>MSP默认情况下，身份(证书)与签名验证需要指定一组参数。这些参数来自<strong>RFC 5280标准</strong>。包括<ul><li>一个自签名的证书列表(满足X.509标准)</li><li>一个用于标识该MSP验证过的中间CA的X.509证书列表，用于证书的校验。这些证书应该备新人员的一个证书所认证；中间的CA则是可选参数</li><li>一个具有可验证路径的X.509证书列表(该路径图通往信任源的一个整数)，以 表示该MSP的管理员。这些证书的所有者对MSP配置的更改要求都是经过授权的(例如根CA 中间CA)</li><li>一个组织单元列表，该MSP的合法成员应该将其包含进他们的X.509证书。这是一个可选的配置参数，比如：当多个组织使用相同的信任源、中间CA以及组织为他们的成员保留了一个OU区的时候，会配置此参数</li><li>一个证书吊销列表(CRLs)的清单，清单每一项对应一个已登记的(中间或根)MSP证书颁发机构(CA)，这是可选的参数</li><li>一个自签名的证书列表，以构成TLS新人员，服务于TLS证书</li><li>一个表示该provider关注的中间TLS CA的X.509证书列表。这些证书应该备TLS信任源的一个证书所认证</li></ul></li><li>除了验证相关参数外，为了使MSP可以对已实例化的节点进行签名或验证，需要指定：<ul><li>用于节点签名的签名密钥(只支持ECDSA密钥)</li><li>节点的X.509证书，对MSP验证参数机制而言是一个有效的身份</li></ul></li><li>MSP身份永远不会过期，只能通过添加到合适的CRL上来被注销。另外，暂时不支持吊销TLS证书</li></ul><h2 id="MSP身份验证规则"><a href="#MSP身份验证规则" class="headerlink" title="MSP身份验证规则"></a>MSP身份验证规则</h2><ul><li>MSP可以被一系列的根证书授权配置，也可以通过一系列中间证书授权配置。</li><li>MSP的ICA证书，必须被它的根证书或中检证书其中之一签署。一个MSP的配置中可能包含一个证书撤销列表或CRL。如果任一个MSP的根证书授权被放在CRL列表中，那么MSP的配置中必须不包含其他任何也被列在CRL的中间证书，否则MSP启动失败</li><li>任何一个根证书是都是一个授权树的根。也就是说，每个根证书可能是不止一个中检证书的签署者，并且这些中间证书会成为其他中检证书或用户证书的签署者<pre><code>      rCA1                rCA2         rCA3    /    \                 |            | iCA1    iCA2             iCA3          id  / \      |               |iCA11 iCA12 id              id|id</code></pre></li><li>默认的MSP实现接受由相应机构签名的X.509证书作为有效身份</li><li>在上述树形中，只有被iCA11 iCA12 iCA2 rCA3签署的证书才会被认为有效。被内部节点签署的证书会被拒绝。</li><li>特别的，如果在MSP配置中指定了一个或多个组织单位，证书的有效性也会被类似的方式影响</li><li>回想一下，在MSP配置中将组织单位指定为两对值，例如(负整数，ou-string)分别表示对那个组织单位进行认证的证书颁发机构和实际的组织单位标识符</li><li>如果证书C由在MSP配置中指定了的组织单位的iCA或RCA签署，则C除其他要求外，如果在其OU字段中包括ou-string，则认为C有效</li></ul><h1 id="如何生成MSP证书及其签名密钥"><a href="#如何生成MSP证书及其签名密钥" class="headerlink" title="如何生成MSP证书及其签名密钥"></a>如何生成MSP证书及其签名密钥</h1><ul><li>要想生成X.509证书以满足MSP配置<ul><li>应用程序可以使用Openssl</li><li>另一个选择是cryptogen工具</li><li>Hyperledger Fabric CA也可用于生辰高配置MSP所需的密钥及证书</li></ul></li></ul><h2 id="peer-amp-orderer侧MSP的设置"><a href="#peer-amp-orderer侧MSP的设置" class="headerlink" title="peer&amp;orderer侧MSP的设置"></a>peer&amp;orderer侧MSP的设置</h2><ul><li>要想(为peer节点或orderer节点)简历本地MSP，管理员应创建一个文件夹，并包含下列6个子文件夹与一个文件：<ol><li>文件夹admincerts包含如下PEM文件：每个PEM文件对应一个管理员证书</li><li>文件夹cacerts包含如下PEM文件：每个PEM文件对应一个根CA证书</li><li>(可选)文件夹intermediatecerts包含如下PEM文件：每个PEM文件对应于一个中间CA的证书</li><li>(可选)文件config.yaml包含相关的OU的信息；后者作为&lt;Certificate,OrganizationalUnitIdentifier&gt;的一部分被定义；其中Certificate表示通往(根或中间)CA的证书的相对路径，这些CA用于为组织成员发证(如cacerts/cacert.pem)；OrganizationalUnitIdentifier表示预期会出现在X.509证书中的实际字符串</li><li>(可选)文件夹crls包含现骨干CRL</li><li>文件夹keystore包含一个PEM文件及节点的签名密钥；值的强调的是，现阶段不支持RSA密钥</li><li>文件夹signcerts：包含一个PEM文件及节点的X.509证书</li><li>（可选）文件夹tlscacerts包含如下PEM文件：每个PEM文件对应于一个根TLS根CA的证书</li><li>可选）文件夹tlsintermediatecerts包含如下PEM文件：每个PEM文件对应于一个中间TLS CA的证书</li></ol></li><li>在节点配置文件中(对peer节点而言是core.yaml文件，对orderer节点而言则是orderer.yaml)，我们需要指定到mspconfig文件夹的路径，以及节点的MSP的MSP标识符。</li><li>mspconfig文件的路径预期是一个对FABRIC_CFG_PATH的相对路径，且会作为参数masCOnfigPAth和LocalMSPDir的值分别提供给peer和orderer节点</li><li>节点MSP的MSP标识符则会作为参数localMSPID和LocalMSPID的值分别提供给peer节点和orderer节点</li><li>运行环境可以通过为peer使用CORE前缀(例CORE_PEER_LOCALMSPID)及为ordeer使用ORDERER前缀(例ORDERER_VENERAL_LOCALMSPID)对以上变量进行复写</li><li>对于orderer的设置，我们需要生成并为orderer提供系统channel的创世区块</li><li>对”本地”的MSP进行配置只能手动进行，且该过程需要重启peer节点和orderer节点。在后续会通过调用系统chaincode的方式来实现，使得不比停止node</li></ul><h2 id="Channel-MSP的配置"><a href="#Channel-MSP的配置" class="headerlink" title="Channel MSP的配置"></a>Channel MSP的配置</h2><ul><li>系统起始节点，我们需要指定网络中出现的所有MSP的验证参数，且这些参数需要在系统channel的创世区块中指定。钱问题到，MSP的验证参数包括MSP标识符、信任源证书、中间CA和管理员的证书，以及OU说明和CLR。系统的创世区块在orderer节点设置节点被提供给它们，且允许它们批准创建channel的请求。如果创世区块包含两个有标识符的MSP，那么orderer节点将拒绝系统创世区块，导致网络引导失败</li><li>对于应用程序channel，创世区块中需要包含管理channel的那部分MSP的验证组件</li><li>应用需要肩负以下责任：<ul><li>在另一个或多个peer节点加入到channel中之前，确保channel的创世区块(或最新配置区块)包含正确的MSP配置信息</li></ul></li><li>在configxgen工具的帮助下引导假设channel时，我们这样来配置channel MSP：将MSP验证参数加入mspconfig文件夹，并将该路径加入到configtx.yaml相关部分</li><li>要想对channel中MSP重新配置，包含发布与MSP的CA相关的证书吊销列表，需要MSP管理员的证书所有者创建config_update对象实现，由管理员管理的客户端向该MSP所在的channel发布更新</li></ul><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="为组织和MSP建立映射"><a href="#为组织和MSP建立映射" class="headerlink" title="为组织和MSP建立映射"></a>为组织和MSP建立映射</h2><ul><li>如果选择其他类型的映射，需要注意以下几点<ul><li>一个组织对应多个MSP。一个组织有各种各样的部门，每个部门以其MSP为代表。在这种情况下，一个peer节点只能被单个MSP拥有，且不会识别相同组织内表示在其他MSP的节点。也就是说，peer节点可以与相同子分支下的一系列其他peer节点共享组织数据，而不是所有构成组织的节点</li><li>多个组织对应一个MSP。这对应这种情况：一个由相似成员结构所管理的组织联盟。这时，peer节点可以与相同MSP下的其他节点互发组织范围的数据，节点是否属于同一个组织并不重要。这对于MSP的定义及peer节点的配置是个限制。</li></ul></li></ul><h2 id="一个组织有多个分支（组织单元），各个分支想要获取不同channel的访问权限"><a href="#一个组织有多个分支（组织单元），各个分支想要获取不同channel的访问权限" class="headerlink" title="一个组织有多个分支（组织单元），各个分支想要获取不同channel的访问权限"></a>一个组织有多个分支（组织单元），各个分支想要获取不同channel的访问权限</h2><ul><li>定义一个MSP来容纳所有组织的全部成员。MSP配置包含一个根CA、中间CA和管理员证书的列表；成员身份会包含一个组织单元(OU)的所属关系。接下来可以定义用于获取特定OU成员的策略，这些策略可以建立channel的读写策略或者chaincode的背书策略。这种方法的局限是gossip peer节点会和本地MSP下的其他peer节点当做相同组织内的成员，并与之分享组织范围内的数据</li><li>为每个分支建立一个MSP。这需要为每个分支引入一组根CA证书。中间CA证书和管理员证书，这样每条通往MSP的路径都不会重叠。这意味着，每个子分支的不同中间CA都会被利用起来。这样的缺点是要管理多个MSP，不过这避免了前面方法出现的问题。我们也可以利用MSP配置的OU扩展来为每个分支定义一个MSP</li></ul><h2 id="将客户端从组织的peer节点中分离"><a href="#将客户端从组织的peer节点中分离" class="headerlink" title="将客户端从组织的peer节点中分离"></a>将客户端从组织的peer节点中分离</h2><h2 id="管理员和CA证书"><a href="#管理员和CA证书" class="headerlink" title="管理员和CA证书"></a>管理员和CA证书</h2><ul><li>将MSP管理员证书设置的与被信任根认证的证书或中间CA证书不同是很重要的。这是一种常见的安全做法，即将成员管理的责任从发行新证书与验证已有证书中拆分出来</li></ul><h2 id="将中间CA加入黑名单"><a href="#将中间CA加入黑名单" class="headerlink" title="将中间CA加入黑名单"></a>将中间CA加入黑名单</h2><ul><li><p>像上文所说的，重新配置MSP是通过一种重配置机制完成的(手动重新配置本地MSP实例，并通过channel合理构建发送给MSP实例的config_update消息)。显然，我们有两种方法保证一个中间CA被MSP身份验证机制彻底忽视：</p><ul><li><p>重新配置MSP并使它信任中间CA证书列表不再包含中间CA的证书。对于本地配置的MSP，这意味着该CA的证书从intermediatecerts文件夹中被删除了</p></li><li><p>重新配置MSP并使它包含由信任源产生的CRL，该CRL会通知MSP废止中间CA证书的使用</p></li><li><p>MSP身份的根CA及MSP TLS证书的根CA(以及相关的中间CA)需要在不同的文件夹中声明。这是为了避免混淆不同等级的证书。且MSP身份与TLS证书都允许重用相同的CA，不过建议实际中避免这样做。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CA证书 </tag>
            
            <tag> 非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器技术中的重要概念</title>
      <link href="/2020/07/11/rong-qi-ji-zhu-zhong-de-chong-yao-gai-nian/"/>
      <url>/2020/07/11/rong-qi-ji-zhu-zhong-de-chong-yao-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="Cgroups——限制"><a href="#Cgroups——限制" class="headerlink" title="Cgroups——限制"></a>Cgroups——限制</h2><h2 id="Namespace——隔离"><a href="#Namespace——隔离" class="headerlink" title="Namespace——隔离"></a>Namespace——隔离</h2><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><ul><li>加入Namespace</li></ul><h2 id="rootfs——一致性"><a href="#rootfs——一致性" class="headerlink" title="rootfs——一致性"></a>rootfs——一致性</h2><h3 id="UnionFS"><a href="#UnionFS" class="headerlink" title="UnionFS"></a>UnionFS</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s部署--kubeadm</title>
      <link href="/2020/07/08/k8s-bu-shu-kubeadm/"/>
      <url>/2020/07/08/k8s-bu-shu-kubeadm/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要kubeadm"><a href="#为什么需要kubeadm" class="headerlink" title="为什么需要kubeadm"></a>为什么需要kubeadm</h1><h2 id="如何容器化kubelet？"><a href="#如何容器化kubelet？" class="headerlink" title="如何容器化kubelet？"></a>如何容器化kubelet？</h2><ul><li>假设：将Kebernetes组件做成一个容器镜像，然后docker run启动。实际使用中会遇到一个很麻烦的问题，kebelet除了需要和容器运行大较大，在操作容器网络、管理数据卷时，都需要直接操作<strong>宿主机</strong><ul><li>操作网络配置来说，docker容器可以通过不开启NetworkNamespace（即host network模式）的方式共享主机的网络栈</li><li>操作宿主机的文件系统就有些困难了。如果想要使用NFS做容器的持久化数据卷，那么kebelet就需要在容器绑定前，在宿主机的指定目录上，先挂载NFS的远程目录。此时kubelet如果运行在容器中，”mount -F nfs”被隔离在一个单独的Mount Namespace中，不能传播到宿主机上</li></ul></li><li>最终，kubeadm选择了妥协方案：直接在宿主机上运行kebelet，使用容器部署其他组件</li></ul><h2 id="kebeadm-init初始化"><a href="#kebeadm-init初始化" class="headerlink" title="kebeadm init初始化"></a>kebeadm init初始化</h2><ul><li>首先对机器进行检查，确保可以部署Kebernetes。包括，linux内核版本检测，Cgroup模块检测，机器hostname是否标准，kubeadm和kubelet版本是否匹配，端口是否占用，Docker是否安装等等</li><li>生成Kubernetes对外提供服务的各种证书和对应的目录<ul><li>kubernetes对外提供服务，除非开启”不安全模式”，否则需要通过HTTPS才能访问kube-apiserver。因此需要证书文件</li><li>证书放在Master节点的/etc/kubernetes/pki目录下。目录中主要证书文件是ca.crt和对应的私钥ca.key</li><li>当用户使用kubectl获取容器日志等streaming操作之，需要通过kube-apiserver向kubelet发起请求，这个连接必须是安全的。kubeadm为这一步生成的apiserver-kubelet-client.crt，对应的死于是apiserver-kubelet-client.key</li><li>此外还有一些其他的证书</li><li>特别的，可以选择不让kubeadm生成这些证书，而是考培现有的证书到/etc/kubernetes/pki内</li></ul></li><li>证书生成后，kubeadm会为其他组件生成访问kube-apiserver所需的配置文件，文件如下<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> /etc/kubernetes/ <span class="token operator">|</span><span class="token function">grep</span> confadmin.conf controller-manager.conf kubelet.conf scheduler.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>kubeadm为Master组件（kube-apiserver，kube-controller-manager，kube-scheduler）生成Pod配置文件</li></ul><h2 id="static-pod"><a href="#static-pod" class="headerlink" title="static pod"></a>static pod</h2><ul><li>当Kubernetes集群上不存在,kubeadm不会直接执行docker run来启动这些容器。有一种特殊的容器启动方法，Static Pod，允许把要部署的Pod的Yaml文件放在指定的目录里。当机器上kubelet启动时，自动检查这个目录，加载所有的Pod Yaml文件，然后启动他们</li><li>可以看出kubelet在kubernetes中地位很高，设计上就是一个独立的组件</li><li>kubeadm中，Master组件的YAML文件会被生成在/etc/kubernetes/manifests 路径下。比如kube-apiserver.yaml<br>```yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>annotations:<br>scheduler.alpha.kubernetes.io/critical-pod: “”<br>creationTimestamp: null<br>labels:<br>component: kube-apiserver<br>tier: control-plane<br>name: kube-apiserver<br>namespace: kube-system<br>spec:<br>containers:<h1 id="启动命令-kube-apiserver是一个二进制文件，后面是配置"><a href="#启动命令-kube-apiserver是一个二进制文件，后面是配置" class="headerlink" title="启动命令 kube-apiserver是一个二进制文件，后面是配置"></a>启动命令 kube-apiserver是一个二进制文件，后面是配置</h1></li></ul><ul><li>command:</li><li>kube-apiserver</li><li>–authorization-mode=Node,RBAC</li><li>–runtime-config=api/all=true</li><li>–advertise-address=10.168.0.2<br>…</li><li>–tls-cert-file=/etc/kubernetes/pki/apiserver.crt</li><li>–tls-private-key-file=/etc/kubernetes/pki/apiserver.key<br>#定义了一个容器，它使用的镜像是：k8s.gcr.io/kube-apiserver-amd64:v1.11.1<br>image: k8s.gcr.io/kube-apiserver-amd64:v1.11.1<br>imagePullPolicy: IfNotPresent<br>livenessProbe:<br>…<br>name: kube-apiserver<br>resources:<br>requests:<br>cpu: 250m<br>volumeMounts:</li><li>mountPath: /usr/share/ca-certificates<br>name: usr-share-ca-certificates<br>readOnly: true<br>…<br>hostNetwork: true<br>priorityClassName: system-cluster-critical<br>volumes:</li><li>hostPath:<br>path: /etc/ca-certificates<br>type: DirectoryOrCreate<br>name: etc-ca-certificates<pre><code></code></pre></li></ul><ul><li>如果要修改一个已有集群的kube-apiserver的配置，需要修改这个yaml文件</li><li>之后，kubeadm还会再生成一个Etcd的pod yaml文件，永阳的Static Pod方式启动Etcd。最后 Master 组件的 Pod YAML 文件如下所示<pre><code>$ ls /etc/kubernetes/manifests/etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml</code></pre></li><li>一旦这些文件出现在被kubeadm监视的/etc/kubernetes/manifest内，kubelet就会自动穿件这些YAML文件中定义的Pod，即Master组件的容器</li><li>Master容器启动后，kubeadm检查localhost:6443/healthz这个Master组件的健康检查URL，等待Master组件完全运行起来</li><li>然后，Kubeadm为集群生成一个<strong>bootstrap token</strong>，只要持有这个token任何一个安装了kubelet和kubadm的节点，都可以通过kubeadm join加入到这个集群当中。这个token会在kubeadm init结束后被打印出来</li><li>token生成后，kubeadm会将ca.crt等Master节点重要信息，通过ConfigMap的方式保存在Etcd中，供后续部署Node节点使用。这个ConfigMap的名字是cluster-info</li></ul><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li>kube-proxy和DNS这两个插件是必须安装的。他们用来提供整个集群的服务发现和DNS功能。他们也只是两个容器镜像，所以kubeadm只要用kubernetes客户端创建两个POD就可以了</li></ul><h2 id="kubeadm-join"><a href="#kubeadm-join" class="headerlink" title="kubeadm join"></a>kubeadm join</h2><ul><li>为什么需要bootstrap token？Kubeadm需要使用token至少发起一次“不安全模式”访问kube-apiserver，从而拿到保存在ConfigMap中的cluster-info(保存APIServer的授权信息)</li><li>拿到cluster-info里的kube-apiserver的地址、端口、证书。kubelet就可以以“安全模式”连接到apiserver上，这样一个新的节点就部署完成了</li></ul><h2 id="配置kubeadm的部署参数"><a href="#配置kubeadm的部署参数" class="headerlink" title="配置kubeadm的部署参数"></a>配置kubeadm的部署参数</h2><ul><li>推荐在使用kubeadm init部署Master节点时，使用如下指令<pre class="line-numbers language-bash"><code class="language-bash">kubeadm init --config kubeadm.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>给kubeadm提供一个yaml文件，<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1alpha2<span class="token key atrule">kind</span><span class="token punctuation">:</span> MasterConfiguration<span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> v1.11.0<span class="token key atrule">api</span><span class="token punctuation">:</span>  <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 192.168.0.102  <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token punctuation">...</span><span class="token key atrule">etcd</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>  <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> k8s.gcr.io<span class="token key atrule">kubeProxy</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>  <span class="token key atrule">bindAddress</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">...</span><span class="token key atrule">kubeletConfiguration</span><span class="token punctuation">:</span>  <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">...</span><span class="token key atrule">networking</span><span class="token punctuation">:</span>  <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local  <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/12<span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span>  <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> /var/run/dockershim.sock<span class="token punctuation">...</span><span class="token key atrule">apiServerExtraArgs</span><span class="token punctuation">:</span>  <span class="token key atrule">advertise-address</span><span class="token punctuation">:</span> 192.168.0.103  <span class="token key atrule">anonymous-auth</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">enable-admission-plugins</span><span class="token punctuation">:</span> AlwaysPullImages<span class="token punctuation">,</span>DefaultStorageClass  <span class="token key atrule">audit-log-path</span><span class="token punctuation">:</span> /home/johndoe/audit.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>kubeadm会使用对应的信息替换/etc/kubernetes/manifests/*.yaml中的command指令的参数</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>kubeadm不太能用于生产环境。因为Etcd、Master等组件都应该是多节点集群，而不是上面使用的单点。这也正是kubeadm的发展方向</li><li>如果有部署规模化生产环境的需求，推荐使用kops或者 SaltStack 这样更复杂的部署工<br>具</li></ul><h1 id="最终需要的docker镜像总结"><a href="#最终需要的docker镜像总结" class="headerlink" title="最终需要的docker镜像总结"></a>最终需要的docker镜像总结</h1><ul><li>kube-apiserver</li><li>kube-controller-manager</li><li>kube-scheduler</li><li>kube-proxy</li><li>DNS</li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务和分布式事务</title>
      <link href="/2020/06/27/shu-ju-ku-shi-wu-he-fen-bu-shi-shi-wu/"/>
      <url>/2020/06/27/shu-ju-ku-shi-wu-he-fen-bu-shi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="冗余数据"><a href="#冗余数据" class="headerlink" title="冗余数据"></a>冗余数据</h2><ul><li>冗余数据并不是指多余的数据，而是多分包含相同信息的数据</li><li>原则上来说，我们不应该存储冗余数据。一方面是造成存储空间的浪费，另一方面，保证这些数据的同步更新是一件很麻烦的事情</li><li>但是，在当前，存储成本相对较低，更为重要的是查询效率。大多数情况下，我们会采用空间换时间的策略，提升用户体验</li><li>为了保证冗余数据的统一性，就需要引入数据库事务作为保证</li></ul><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul><li>数据库事务可以给我们ACID保证，即原子性A，一致性C，隔离性I，持久性D</li><li>原子性：一个事务中的多个操作，要么一起成功要么一起失败，不会有中间状态</li><li>一致性：对于其他事务，任何时刻读到的数据总是一致的，要么是事务执行前的状态，要么是事务执行后的状态</li><li>隔离性：还没有提交的事务，对于其他的事务是不可见的</li><li>持久性：只要事务提交成功，即使数据库发生宕机也不会改变事务的结果</li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li>ACID是一个非常严格的定义，是一个非常理想的状态</li><li>如果要保证严格的ACID，数据库就只能串行执行，效率就受到了限制</li><li>对于大多数系统来说，事务的原子性和持久性是一定要保证的，至于一致性和隔离性可以做适当牺牲来换取更高的效率</li><li>MySQL提供了四种隔离级别</li></ul><table><thead><tr><th>隔离界别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>能读到未提交的数据RU</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>能读到已提交的数据RC</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>可重复读 RR</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>串行执行Serializeable</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><ul><li>RU为完全不隔离，不同事务之间可以读取到尚未提交的数据，可能出现脏读。串行执行性能最差，一般这两个都不会用</li><li>RC和RR为常见的隔离级别，MySQL的默认隔离级别为RR</li><li>RC和RR最重要的区别就是，是否可以重复读（原始数据）</li><li>RC在于如果其他事务修改了当前事务用到的数据，如果在事务中再次读取，就会读到被其他事务修改后的数据，不可以读到原始的数据，为不可重复读</li><li>RR则相反，在当前事务内，在本事务提交前，永远能读到事务开始时的数据</li><li>幻读是一个很少见的情况，在其他事务插入了某条数据后，本是无插入数据时可能会遇到主键重复错误，然而，RR模式下此时查询却无法查到数据，就行出现了幻觉一样</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> 数据库事务 </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储接口的幂等实现</title>
      <link href="/2020/06/12/idempotent-implementation-of-db-interface/"/>
      <url>/2020/06/12/idempotent-implementation-of-db-interface/</url>
      
        <content type="html"><![CDATA[<h2 id="如何实现接口幂等性（重复调用）"><a href="#如何实现接口幂等性（重复调用）" class="headerlink" title="如何实现接口幂等性（重复调用）"></a>如何实现接口幂等性（重复调用）</h2><ul><li>在平时的调用中，由于用户点击两次、网络波动等原因，经常会放生同样的请求发送两次的情况。作为后端存储系统，要对这种情况有处理能力，保证不管是请求一次还是多次，请求的结果是一样的。这就是接口的幂等性实现。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>利用数据库的主键唯一约束，在插入数据时带上主键，而不是自动生成</li><li>以电商项目为例，项目架构如下:<pre class="mermaid">sequenceDiagram用户->>前端: 下单前端->>订单号服务: 生成订单号订单号服务->>前端: 返回订单号前端->>用户: 获得订单号用户->>前端: 提交订单前端->>订单服务: 创建订单订单服务->>前端: 成功/失败前端->>用户: 成功/失败</pre></li><li>特别的，如果是由于重复插入导致的失败，不要把错误展示给用户，否则会造成误导</li></ul><h2 id="如何解决ABA问题（调用顺序）"><a href="#如何解决ABA问题（调用顺序）" class="headerlink" title="如何解决ABA问题（调用顺序）"></a>如何解决ABA问题（调用顺序）</h2><ul><li>在高并发环境下，可能会在短时间内对一条数据做多次更新</li><li>对数据的更新，本质是一次数据库的update。如果，第一次更新由于某些原因，没有立即生效（网络延迟等），第二次更新先生效，此时数据又被更新为第一次请求的数据。这就是著名的ABA问题<pre class="mermaid">sequenceDiagram前端->>商品服务: 1：改价100商品服务->>前端: 1.1: 响应丢失（修改成功）前端->>商品服务: 2：改价200前端->>商品服务: 1.2: 请求重发商品服务->>前端: 2.1 请求成功商品服务->>前端: 1.3 请求成功</pre></li><li>上述场景，就会当值更新数据的错误，数据最终被错误的更新为第一次请求的值</li></ul><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>在数据库中增加版本号的列，在修改数据时，where条件中增加当前版本号，并在修改数据后，给版本号+1<pre class="mermaid">sequenceDiagram前端->>商品服务: 1：改价100              版本号1商品服务->>前端: 1.1: 响应丢失（修改成功）版本号从1更新为2前端->>商品服务: 2：改价200              意图把版本号从1更新为2前端->>商品服务: 1.2: 请求重发           意图把版本号从1更新为2商品服务->>前端: 2.1 失败商品服务->>前端: 1.3 失败</pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幂等 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data-switch</title>
      <link href="/2020/06/09/data-switch/"/>
      <url>/2020/06/09/data-switch/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 安全沙箱 </tag>
            
            <tag> 加密通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/26/hello-world/"/>
      <url>/2020/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><pre class="mermaid">graph LRA(C)-->B(D)</pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
